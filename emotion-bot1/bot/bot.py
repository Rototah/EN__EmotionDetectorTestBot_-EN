import os
import re
import json
import asyncio
import logging
import aiohttp
from datetime import datetime
from collections import Counter, defaultdict
import time

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATA_FILE = os.path.join(BASE_DIR, "bot/data/user_data.json")
#VOTE_THRESHOLD = 2  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏

EMOTIONS = {
    "joy": {"ru": "—Ä–∞–¥–æ—Å—Ç—å", "en": "joy"},
    "sadness": {"ru": "–≥—Ä—É—Å—Ç—å", "en": "sadness"},
    "anger": {"ru": "–≥–Ω–µ–≤", "en": "anger"},
    "fear": {"ru": "—Å—Ç—Ä–∞—Ö", "en": "fear"},
    "surprise": {"ru": "—É–¥–∏–≤–ª–µ–Ω–∏–µ", "en": "surprise"},
    "neutral": {"ru": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ", "en": "neutral"},
    "gratitude": {"ru": "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", "en": "gratitude"},
    "excitement": {"ru": "–≤–æ–ª–Ω–µ–Ω–∏–µ", "en": "excitement"},
    "love": {"ru": "–ª—é–±–æ–≤—å", "en": "love"},
    "loneliness": {"ru": "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "en": "loneliness"},
    "anticipation": {"ru": "–æ–∂–∏–¥–∞–Ω–∏–µ", "en": "anticipation"},
    "disgust": {"ru": "–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ", "en": "disgust"},
    "jealousy": {"ru": "—Ä–µ–≤–Ω–æ—Å—Ç—å", "en": "jealousy"},
    "embarrassment": {"ru": "—Å–º—É—â–µ–Ω–∏–µ", "en": "embarrassment"},
    "serenity": {"ru": "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "en": "serenity"},
    "shame": {"ru": "—Å—Ç—ã–¥", "en": "shame"},
    "confusion": {"ru": "–∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "en": "confusion"},
    "no_emotion": {"ru": "–Ω–µ—Ç —ç–º–æ—Ü–∏–∏", "en": "no emotion"},
}

STICKER_PATHS = {
    "joy": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/—Ä–∞–¥–æ—Å—Ç—å.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/joy.gif")
    },
    "sadness": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–≥—Ä—É—Å—Ç—å.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/sadness.gif")
    },
    "anger": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–≥–Ω–µ–≤.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/anger.gif")
    },
    "fear": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/—Å—Ç—Ä–∞—Ö.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/fear.gif")
    },
    "surprise": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/—É–¥–∏–≤–ª–µ–Ω–∏–µ.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/surprise.gif")
    },
    "neutral": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/neutral.gif")
    },
    "gratitude": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/gratitude.gif")
    },
    "excitement": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–≤–æ–ª–Ω–µ–Ω–∏–µ.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/excitement.gif")
    },
    "love": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–ª—é–±–æ–≤—å.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/love.gif")
    },
    "loneliness": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/loneliness.gif")
    },
    "anticipation": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–æ–∂–∏–¥–∞–Ω–∏–µ.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/anticipation.gif")
    },
    "disgust": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/disgust.gif")
    },
    "jealousy": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/—Ä–µ–≤–Ω–æ—Å—Ç—å.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/jealousy.gif")
    },
    "embarrassment": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/—Å–º—É—â–µ–Ω–∏–µ.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/embarrassment.gif")
    },
    "serenity": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/serenity.gif")
    },
    "shame": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/—Å—Ç—ã–¥.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/shame.gif")
    },
    "confusion": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/confusion.gif")
    },
    "no_emotion": {
        "ru": os.path.join(BASE_DIR, "bot/assets/ru/–Ω–µ—Ç_—ç–º–æ—Ü–∏–∏.gif"),
        "en": os.path.join(BASE_DIR, "bot/assets/en/no_emotion.gif")}
    
}

class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_emotion = State()

storage = MemoryStorage()
bot = Bot(token="8085305653:AAF9PT4PrItuach8YtY7DC-EL135qrQ3xwM", default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_history = {}
emotion_stats = {}
message_to_emotion = {}
user_votes = {}
user_last_request = defaultdict(float)

async def detect_emotion_api(text: str) -> dict:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏—é —á–µ—Ä–µ–∑ API"""
    lang = detect_language(text)
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:8001/predict",
                json={"text": text},
                timeout=3
            ) as response:
                data = await response.json()
                return {
                    "emotion": data["emotion"],
                    "confidence": data["confidence"],
                    "language": data["language"],
                    "label": data["label"]
                }
    except Exception as e:
        logger.error(f"API error: {e}")
        return {
            "emotion": "neutral",
            "confidence": 0.5,
            "language": lang,
            "label": EMOTIONS["neutral"][lang]
        }

def detect_language(text: str) -> str:
    return "ru" if re.search(r'[–∞-—è—ë]', text.lower()) else "en"

def get_feedback_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –ü–æ–¥—Ö–æ–¥–∏—Ç", callback_data="feedback_yes"),
         InlineKeyboardButton(text="üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data="feedback_no")]
    ])

def get_emotions_kb():
    buttons = []
    row = []
    for i, emotion in enumerate(EMOTIONS.keys()):
        row.append(InlineKeyboardButton(text=EMOTIONS[emotion]["ru"], callback_data=f"emotion_{emotion}"))
        if (i + 1) % 3 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def save_data():
    data = {
        "message_to_emotion": message_to_emotion,
        "user_history": user_history,
        "emotion_stats": {k: dict(v) for k, v in emotion_stats.items()},
        "user_votes": {k: dict(v) for k, v in user_votes.items()}
    }
    try:
        with open(DATA_FILE, "w", encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding='utf-8') as f:
                data = json.load(f)
                globals().update(data)
                emotion_stats.update({k: Counter(v) for k, v in data.get("emotion_stats", {}).items()})
                user_votes.update({k: Counter(v) for k, v in data.get("user_votes", {}).items()})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "Hello! I'm an emotion detection bot.\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π.\n\n"
        "Currently, I am only good at defining emotions in English. The Russian language is under development.\n"
        "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —è —Ö–æ—Ä–æ—à–æ –æ–ø—Ä–µ–¥–µ–ª—è—é —ç–º–æ—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "If you have trouble with English, here's a very accurate translator:\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º, –≤–æ—Ç –æ—á–µ–Ω—å —Ç–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫:\n"
        "https://www.deepl.com/translator\n\n"
        "Send me a message in English and I'll detect the emotion in it!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —ç–º–æ—Ü–∏—é!"
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
	"/how_i_work - –ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é\n"
	"/history - –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è(–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
    )


@dp.message(Command("stats"))
async def show_stats(message: types.Message):
    user_id = str(message.from_user.id)
    
    if user_id not in user_history or not user_history[user_id]:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π.")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —ç–º–æ—Ü–∏—è–º
    emotion_counter = Counter()
    for entry in user_history[user_id]:
        emotion = entry["emotion"]
        emotion_counter[emotion] += 1
    
    total = sum(emotion_counter.values())
    lang = detect_language(message.text) if message.text else "ru"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_text = "üìä <b>–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —ç–º–æ—Ü–∏–π:</b>\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã
    sorted_emotions = sorted(emotion_counter.items(), key=lambda x: x[1], reverse=True)
    
    for emotion, count in sorted_emotions:
        percentage = (count / total) * 100
        emotion_name = EMOTIONS.get(emotion, {}).get(lang, emotion)
        stats_text += f"‚Ä¢ {emotion_name}: {count} ({percentage:.1f}%)\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3
    top_emotions = sorted_emotions[:3]
    if top_emotions:
        stats_text += "\nüèÜ <b>–¢–æ–ø-3 —ç–º–æ—Ü–∏–∏:</b>\n"
        for i, (emotion, count) in enumerate(top_emotions, 1):
            emotion_name = EMOTIONS.get(emotion, {}).get(lang, emotion)
            stats_text += f"{i}. {emotion_name} - {count} —Ä–∞–∑\n"
    
    stats_text += f"\n<b>–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤:</b> {total}"
    
    await message.answer(stats_text, parse_mode=ParseMode.HTML)

@dp.message(Command("history"))
async def show_history(message: types.Message):
    user_id = str(message.from_user.id)
    
    if user_id not in user_history or not user_history[user_id]:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return
    
    lang = "ru"  # –ò–ª–∏ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history_text = "üïí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n\n"
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
    last_entries = user_history[user_id][-5:][::-1]  # –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
    
    for i, entry in enumerate(last_entries, 1):
        emotion = entry["emotion"]
        text_preview = (
            entry["text"][:20] + "..." 
            if len(entry["text"]) > 20 
            else entry["text"]
        )
        timestamp = datetime.fromisoformat(entry["timestamp"]).strftime("%d.%m %H:%M")
        
        history_text += (
            f"{i}. <i>{text_preview}</i>\n"
            f"‚Üí {EMOTIONS.get(emotion, {}).get(lang, emotion)}\n"
            f"<code>{timestamp}</code>\n\n"
        )
    
    await message.answer(history_text, parse_mode=ParseMode.HTML)


@dp.message(Command("how_i_work"))
async def how_i_work(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:</b>\n\n"
        "–Ø - –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–µ. –í–æ—Ç –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n"
        "üîπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/help - –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
        "/stats - –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π\n"
        "/how_i_work - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã\n\n"
        "üîπ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —ç–º–æ—Ü–∏—é.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–æ–π –≤—ã–±–æ—Ä –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —ç–º–æ—Ü–∏—é - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å—Ç–∞—Ç—å —Ç–æ—á–Ω–µ–µ!\n\n"
        "üîπ <b>–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:</b>\n"
        "–ï—Å–ª–∏ —è –æ—à–∏–±—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.\n"
        "–Ø –∑–∞–ø–æ–º–Ω—é –≤–∞—à –≤—ã–±–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –±—É–¥—É—â–µ–µ.",
        parse_mode=ParseMode.HTML
    )


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message(F.text)
async def analyze(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_time = time.time()
    
    if current_time - user_last_request.get(user_id, 0) < 10:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
        return
    
    user_last_request[user_id] = current_time
    user_text = message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if user_text in user_votes:
        votes = user_votes[user_text]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ–ª–æ—Å–∞, –≤—ã–±–∏—Ä–∞–µ–º —ç–º–æ—Ü–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        if votes:
            max_emotion = max(votes, key=votes.get)
            lang = detect_language(user_text)
            sticker_path = STICKER_PATHS.get(max_emotion, {}).get(lang, "")
            
            if sticker_path and os.path.exists(sticker_path):
                with open(sticker_path, "rb") as f:
                    await message.answer_animation(
                        BufferedInputFile(f.read(), "sticker.gif"),
                        caption=f"–ù–∞ –æ—Å–Ω–æ–≤–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {EMOTIONS[max_emotion][lang]} (–≥–æ–ª–æ—Å–æ–≤: {votes[max_emotion]})"
                    )
            else:
                await message.answer(f"–ù–∞ –æ—Å–Ω–æ–≤–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {EMOTIONS[max_emotion][lang]} (–≥–æ–ª–æ—Å–æ–≤: {votes[max_emotion]})")
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —ç–º–æ—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ—Ä–µ–∑ API
    emotion_data = await detect_emotion_api(message.text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if user_id not in user_history:
        user_history[user_id] = []
    user_history[user_id].append({
        "text": message.text,
        "emotion": emotion_data["emotion"],
        "timestamp": datetime.now().isoformat()
    })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    sticker_path = STICKER_PATHS.get(emotion_data["emotion"], {}).get(emotion_data["language"], "")
    if sticker_path and os.path.exists(sticker_path):
        with open(sticker_path, "rb") as f:
            sent_message = await message.answer_animation(
                BufferedInputFile(f.read(), "sticker.gif"),
                caption=f"–Ø –¥—É–º–∞—é, —ç—Ç–æ {emotion_data['label']}...",
                reply_markup=get_feedback_kb()
            )
    else:
        sent_message = await message.answer(
            f"{emotion_data['label']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {emotion_data['confidence']:.0%})",
            reply_markup=get_feedback_kb()
        )
    
    await state.set_state(FeedbackStates.waiting_for_feedback)
    await state.set_data({
        "user_text": message.text.lower(),
        "original_emotion": emotion_data["emotion"],
        "message_id": sent_message.message_id
    })
    
    save_data()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@dp.callback_query(F.data.startswith("feedback_"))
async def handle_feedback(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    user_text = user_data.get("user_text", "")
    original_emotion = user_data.get("original_emotion", "")
    
    if callback.data == "feedback_yes":
        if user_text not in user_votes:
            user_votes[user_text] = Counter()
        user_votes[user_text][original_emotion] += 1
        
        votes = user_votes[user_text]
        max_emotion = max(votes, key=votes.get)
        lang = detect_language(user_text)
        
        # –¢–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å, –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_caption(
            caption=f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω: {EMOTIONS[max_emotion][lang]} (–≥–æ–ª–æ—Å–æ–≤: {votes[max_emotion]})",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        )
        await state.clear()

    elif callback.data == "feedback_no":
        await callback.message.edit_caption(
            "–ö–∞–∫–∞—è —ç–º–æ—Ü–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç –ª—É—á—à–µ?",
            reply_markup=get_emotions_kb()
        )
        await state.set_state(FeedbackStates.waiting_for_emotion)
    
    save_data()
    await callback.answer()

@dp.callback_query(F.data.startswith("emotion_"), FeedbackStates.waiting_for_emotion)
async def handle_emotion_choice(callback: types.CallbackQuery, state: FSMContext):
    selected_emotion = callback.data.split("_")[1]
    user_data = await state.get_data()
    user_text = user_data.get("user_text", "")
    original_emotion = user_data.get("original_emotion", "")
    message_id = user_data.get("message_id", "")
    
    if user_text not in user_votes:
        user_votes[user_text] = Counter()
    user_votes[user_text][selected_emotion] += 1
    
    votes = user_votes[user_text]
    lang = detect_language(user_text)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∏–∫–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–∏
    if selected_emotion != original_emotion:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        sticker_path = STICKER_PATHS.get(selected_emotion, {}).get(lang, "")
        if sticker_path and os.path.exists(sticker_path):
            with open(sticker_path, "rb") as f:
                await callback.message.answer_animation(
                    BufferedInputFile(f.read(), "sticker.gif"),
                    caption=f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å! –ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º, —è —Å—Ç–∞–ª —É–º–Ω–µ–µ!\n"
                           f"–í—ã–±—Ä–∞–Ω–æ: {EMOTIONS[selected_emotion][lang]} (–≥–æ–ª–æ—Å–æ–≤: {votes[selected_emotion]})"
                )
        else:
            await callback.message.answer(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å! –ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º, —è —Å—Ç–∞–ª —É–º–Ω–µ–µ!\n"
                f"–í—ã–±—Ä–∞–Ω–æ: {EMOTIONS[selected_emotion][lang]} (–≥–æ–ª–æ—Å–æ–≤: {votes[selected_emotion]})"
            )
    else:
        # –ï—Å–ª–∏ —ç–º–æ—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        await callback.message.edit_caption(
            caption=f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω: {EMOTIONS[selected_emotion][lang]} (–≥–æ–ª–æ—Å–æ–≤: {votes[selected_emotion]})",
            reply_markup=None
        )
    
    await state.clear()
    save_data()
    await callback.answer()

# –ó–∞–ø—É—Å–∫
async def on_startup():
    load_data()
    logger.info("Bot started")

async def on_shutdown():
    save_data()
    logger.info("Bot stopped")

if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    asyncio.run(dp.start_polling(bot))